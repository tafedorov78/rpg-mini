{"version":3,"sources":["file:///Users/artemfedorov/Documents/dev/rpg-mini/assets/ui_prefabs/components/ImageSwitcher/ImageSwitcher.ts"],"names":["_decorator","CCInteger","Component","Sprite","SpriteFrame","UITransform","ccclass","property","executeInEditMode","FrameSwitcher","type","tooltip","step","_currentFrameIndex","sprite","currentFrameIndex","value","frames","length","updateImage","console","error","onLoad","getComponent","update","dt","spriteFrame","size","originalSize","uiTransform","setContentSize","width","height"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,W,OAAAA,W;;;;;;;;;OAC1D;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,QAAX;AAAqBC,QAAAA;AAArB,O,GAA2CR,U;;+BAIpCS,a,WAFZH,OAAO,CAAC,eAAD,C,UAGHC,QAAQ,CAAC,CAACH,WAAD,CAAD,C,UAGRG,QAAQ,CAAC;AACNG,QAAAA,IAAI,EAAET,SADA;AAENU,QAAAA,OAAO,EAAE,+BAFH;AAGNC,QAAAA,IAAI,EAAE;AAHA,OAAD,C,gBALZJ,iB,qBADD,MAEaC,aAFb,SAEmCP,SAFnC,CAE6C;AAAA;AAAA;;AAAA;;AAAA,eAqBjCW,kBArBiC,GAqBJ,CArBI;AAAA,eAsBjCC,MAtBiC,GAsBhB,IAtBgB;AAAA;;AASpB,YAAjBC,iBAAiB,GAAG;AACpB,iBAAO,KAAKF,kBAAZ;AACH;;AACoB,YAAjBE,iBAAiB,CAACC,KAAD,EAAgB;AACjC,cAAIA,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAG,KAAKC,MAAL,CAAYC,MAAtC,EAA8C;AAC1C,iBAAKL,kBAAL,GAA0BG,KAA1B;AACA,iBAAKG,WAAL;AACH,WAHD,MAGO;AACHC,YAAAA,OAAO,CAACC,KAAR,CAAc,sBAAd,EAAsCL,KAAtC;AACH;AACJ;;AAKDM,QAAAA,MAAM,GAAG;AACL,eAAKR,MAAL,GAAc,KAAKS,YAAL,CAAkBpB,MAAlB,CAAd;AACA,eAAKgB,WAAL;AACH;;AAESK,QAAAA,MAAM,CAACC,EAAD,EAAmB;AAC/B,eAAKN,WAAL;AACH;;AAEDA,QAAAA,WAAW,GAAG;AACV,cAAI,KAAKF,MAAL,CAAYC,MAAZ,GAAqB,CAArB,IAA0B,KAAKJ,MAAnC,EAA2C;AACvC,iBAAKA,MAAL,CAAYY,WAAZ,GAA0B,KAAKT,MAAL,CAAY,KAAKJ,kBAAjB,CAA1B;AAEA,kBAAMa,WAAW,GAAG,KAAKT,MAAL,CAAY,KAAKJ,kBAAjB,CAApB;AACA,kBAAMc,IAAI,GAAGD,WAAW,CAACE,YAAzB;AAEA,kBAAMC,WAAW,GAAG,KAAKN,YAAL,CAAkBlB,WAAlB,CAApB;;AACA,gBAAIwB,WAAW,IAAIF,IAAnB,EAAyB;AACrBE,cAAAA,WAAW,CAACC,cAAZ,CAA2BH,IAAI,CAACI,KAAhC,EAAuCJ,IAAI,CAACK,MAA5C;AACH;AACJ;AACJ;;AA7CwC,O;;;;;iBAEjB,E","sourcesContent":["import { _decorator, CCInteger, Component, Sprite, SpriteFrame, UITransform } from 'cc';\nconst { ccclass, property, executeInEditMode } = _decorator;\n\n@ccclass('FrameSwitcher')\n@executeInEditMode\nexport class FrameSwitcher extends Component {\n    @property([SpriteFrame])\n    frames: SpriteFrame[] = [];\n\n    @property({\n        type: CCInteger,\n        tooltip: \"Index of the frame to display\",\n        step: 1,\n    })\n    get currentFrameIndex() {\n        return this._currentFrameIndex;\n    }\n    set currentFrameIndex(value: number) {\n        if (value >= 0 && value < this.frames.length) {\n            this._currentFrameIndex = value;\n            this.updateImage();\n        } else {\n            console.error('Invalid frame index:', value);\n        }\n    }\n\n    private _currentFrameIndex: number = 0;\n    private sprite: Sprite = null;\n\n    onLoad() {\n        this.sprite = this.getComponent(Sprite);\n        this.updateImage();\n    }\n\n    protected update(dt: number): void {\n        this.updateImage();\n    }\n\n    updateImage() {\n        if (this.frames.length > 0 && this.sprite) {\n            this.sprite.spriteFrame = this.frames[this._currentFrameIndex];\n            \n            const spriteFrame = this.frames[this._currentFrameIndex];\n            const size = spriteFrame.originalSize;\n\n            const uiTransform = this.getComponent(UITransform);\n            if (uiTransform && size) {\n                uiTransform.setContentSize(size.width, size.height);\n            }\n        }\n    }\n}\n"]}