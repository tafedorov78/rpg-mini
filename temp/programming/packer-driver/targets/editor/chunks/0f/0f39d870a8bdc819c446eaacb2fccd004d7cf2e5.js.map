{"version":3,"sources":["file:///Users/artemfedorov/Documents/dev/rpg-mini/assets/Scripts/scenes/MainMenuScene.ts"],"names":["_decorator","Animation","Button","Component","director","log","Node","FrameSwitcher","HeroesTabComponent","Facade","Score","ccclass","property","MainMenuScene","type","levelIconsUpdate","team","totalHP","heroes","forEach","hero","HP","score","calculateScore","levelsData","levelid","icon","LevelsIconsContainer","getChildByName","NOT_AVAILABLE","getComponent","currentFrameIndex","save","onEnable","value","Error","Math","round","start","loadGameProgress","localStorage","setItem","JSON","stringify","parse","getItem","level","id","i","children","length","complete","available","data","push","onLevelClicked","e","battleData","loadScene","showHeroesTab","HeroesTab","play","closeHeroesTab","team1","checkedHeroes","team2","getEnemyTeam","json","heroesConfig","count","uniqueElements","Array","from","Set","j","floor","random","slice"],"mappings":"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","sourcesContent":["import { _decorator, Animation, Button, Component, director, EventTouch, log, Node } from 'cc';\nimport { FrameSwitcher } from '../../prefabs/ImageSwitcher/ImageSwitcher';\nimport { Team } from '../components/BattleComponent';\nimport { HeroesTabComponent } from '../components/HeroesTabComponent';\nimport { HeroConfig } from '../ConfigTypes';\nimport Facade from '../Facade';\nimport { GameLevel, Score } from '../GameTypes';\nconst { ccclass, property } = _decorator;\n\n@ccclass('MainMenuScene')\nexport class MainMenuScene extends Component {\n\n    @property(Button)\n    startGameButton: Button = null;\n\n    @property({ type: Node })\n    public HeroesTab: Node = null;\n\n    @property({ type: Node })\n    public LevelsIconsContainer: Node = null;\n\n    protected onEnable(): void {\n        if (Facade.team) {\n            this.levelIconsUpdate(Facade.team);\n            Facade.team = null;\n        }\n    }\n\n    private levelIconsUpdate = (team: Team): void => {\n        let totalHP: number = 0;\n        team.heroes.forEach(hero => {\n            totalHP += hero.HP;\n        });\n        let score = this.calculateScore(totalHP);\n        Facade.levelsData[Facade.levelid].score = score;\n        const icon = this.LevelsIconsContainer.getChildByName(`LevelIcon${Facade.levelid}`);\n        if (totalHP === 0) {\n            score = Score.NOT_AVAILABLE;\n        }\n        icon.getComponent(FrameSwitcher).currentFrameIndex = score;\n\n        this.save();\n    }\n\n    private calculateScore(value: number): number {\n        if (value === 0) return 0;\n\n        if (value > 500) {\n            throw new Error(\"Value must be between 1 and 500\");\n        }\n\n        const score = ((value - 1) * 2 / 450) + 1;\n        return Math.round(score);\n    }\n\n    start() {\n        this.loadGameProgress();\n    }\n\n    private save() {\n        localStorage.setItem('levels', JSON.stringify(Facade.levelsData));\n    }\n\n    private loadGameProgress(): void {\n        Facade.levelsData = JSON.parse(localStorage.getItem('levels'));\n\n        if (Facade.levelsData) {\n            Facade.levelsData.forEach((level: GameLevel) => {\n                const icon = this.LevelsIconsContainer.getChildByName(`LevelIcon${level.id}`);\n                if (icon) {\n                    icon.getComponent(FrameSwitcher).currentFrameIndex = level.score;\n                }\n            });\n        } else {\n            Facade.levelsData = [];\n            for (let i = 0; i < this.LevelsIconsContainer.children.length; i++) {\n                const level = {\n                    id: i,\n                    complete: false,\n                    score: Score.NOT_AVAILABLE,\n                    available: true,\n                    data: null\n                }\n                Facade.levelsData.push(level);\n            }\n        }\n    }\n\n    onLevelClicked(e: EventTouch, id: number) {\n        if (!Facade.battleData) {\n            log('YOU HAVE TO PICK UP HEROES!');\n            return;\n        }\n\n        Facade.levelid = +id;\n        director.loadScene('GameScene');\n    }\n\n    showHeroesTab() {\n        this.HeroesTab.getComponent(Animation).play('HeroesTabOpen');\n    }\n\n    closeHeroesTab() {\n        Facade.battleData = {\n            team1: {\n                id: 1,\n                heroes: this.HeroesTab.getComponent(HeroesTabComponent).checkedHeroes,\n            },\n            team2: {\n                id: 2,\n                heroes: this.getEnemyTeam(Facade.json.heroesConfig, 5)\n            }\n        }\n        this.HeroesTab.getComponent(Animation).play('HeroesTabClose');\n    }\n\n    getEnemyTeam(heroesConfig: HeroConfig[], count: number): HeroConfig[] {\n        const uniqueElements = Array.from(new Set(heroesConfig));\n\n        for (let i = uniqueElements.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [uniqueElements[i], uniqueElements[j]] = [uniqueElements[j], uniqueElements[i]];\n        }\n\n        return uniqueElements.slice(0, count);\n    }\n}\n"]}