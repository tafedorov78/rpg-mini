{"version":3,"sources":["file:///Users/artemfedorov/Documents/dev/rpg-mini/assets/Scripts/state-machine/StateMachine.ts"],"names":["StateMachine","EventManager","StateMachineEvents","constructor","model","stateEnum","currentState","idsMap","statesMap","currentStateName","statesEnum","Map","init","addState","StatesEnum","id","stateId","getStateId","has","Error","set","name","setState","data","isSkipped","cleanUp","get","stateChanged","begin","console","log","dispatch","STATE_CHANGED"],"mappings":";;;gEAKaA,Y;;;;;;;;;;;;;;;;;;;;;;;;;;AAHNC,MAAAA,Y;;AACEC,MAAAA,kB,iBAAAA,kB;;;;;;;8BAEIF,Y,GAAN,MAAMA,YAAN,CAA4C;AAQjDG,QAAAA,WAAW,CAACC,KAAD,EAAaC,SAAb,EAAgC;AAAA,eAP3CD,KAO2C;AAAA,eAN3CE,YAM2C;AAAA,eAL3CC,MAK2C;AAAA,eAJ3CC,SAI2C;AAAA,eAH3CC,gBAG2C;AAAA,eAF3CC,UAE2C;AACzC,eAAKN,KAAL,GAAaA,KAAb;AACA,eAAKE,YAAL,GAAoB,IAApB;AACA,eAAKC,MAAL,GAAc,IAAII,GAAJ,EAAd;AACA,eAAKH,SAAL,GAAiB,IAAIG,GAAJ,EAAjB;AACA,eAAKF,gBAAL,GAAwB,EAAxB;AACA,eAAKG,IAAL,CAAUP,SAAV;AACD;;AAEMO,QAAAA,IAAI,CAACP,SAAD,EAAuB;AAChC,eAAKK,UAAL,GAAkBL,SAAlB;AACD;;AAEMQ,QAAAA,QAAQ,CAACC,UAAD,EAAkBC,EAAlB,EAAoC;AACjD,cAAIC,OAAe,GAAG,KAAKC,UAAL,CAAgBF,EAAhB,CAAtB;;AACA,cAAI,KAAKR,MAAL,CAAYW,GAAZ,CAAgBF,OAAhB,CAAJ,EAA8B;AAC5B,kBAAM,IAAIG,KAAJ,CAAU,4BAA4BH,OAAtC,CAAN;AACD;;AACD,eAAKT,MAAL,CAAYa,GAAZ,CAAgBL,EAAhB,EAAoBC,OAApB;AACA,eAAKR,SAAL,CAAeY,GAAf,CAAmBL,EAAnB,EAAuB,IAAID,UAAJ,CAAe,IAAf,EAAqBC,EAArB,EAAyB,KAAKX,KAA9B,CAAvB;AACD;;AAEMa,QAAAA,UAAU,CAACF,EAAD,EAAqB;AACpC,eAAK,IAAIM,IAAT,IAAiB,KAAKX,UAAtB,EAAkC;AAChC,gBAAIK,EAAE,KAAK,KAAKL,UAAL,CAAgBW,IAAhB,CAAX,EAAkC;AAChC,qBAAOA,IAAP;AACD;AACF;AACF;;AAEMC,QAAAA,QAAQ,CAACP,EAAD,EAAaQ,IAAb,EAAyBC,SAAzB,EAAoD;AACjE,cAAI,KAAKlB,YAAT,EAAuB;AACrB,iBAAKA,YAAL,CAAkBmB,OAAlB;AACD;;AACD,eAAKnB,YAAL,GAAoB,KAAKE,SAAL,CAAekB,GAAf,CAAmBX,EAAnB,CAApB;AACA,eAAKN,gBAAL,GAAwB,KAAKF,MAAL,CAAYmB,GAAZ,CAAgBX,EAAhB,CAAxB;AACA,eAAKY,YAAL,CAAkB,KAAKpB,MAAL,CAAYmB,GAAZ,CAAgBX,EAAhB,CAAlB,EAAiD,KAAKX,KAAtD;AACA,eAAKE,YAAL,CAAkBsB,KAAlB,CAAwBL,IAAxB;AACD;;AAEDI,QAAAA,YAAY,CAACZ,EAAD,EAAaX,KAAb,EAAyB;AACnCyB,UAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBf,EAAG,EAAjC;AAEA;AAAA;AAAA,4CAAagB,QAAb,CAAsB;AAAA;AAAA,wDAAmBC,aAAzC,EAAwDjB,EAAxD;AACAX,UAAAA,KAAK,CAACE,YAAN,GAAqB,KAAKG,gBAA1B;AACD;;AArDgD,O","sourcesContent":["import { IStateMachine } from \"./IStateMachine\"\nimport { BaseState } from \"./BaseState\"\nimport EventManager from \"./events/EventManager\"\nimport { StateMachineEvents } from \"./StateMachineEvents\"\n\nexport class StateMachine implements IStateMachine {\n  model: any\n  currentState: BaseState\n  idsMap: Map<string, string>\n  statesMap: Map<string, BaseState>\n  currentStateName: string\n  statesEnum: any\n\n  constructor(model: any, stateEnum: object) {\n    this.model = model\n    this.currentState = null as any\n    this.idsMap = new Map<string, string>()\n    this.statesMap = new Map<string, BaseState>()\n    this.currentStateName = \"\"\n    this.init(stateEnum)\n  }\n\n  public init(stateEnum: any): void {\n    this.statesEnum = stateEnum\n  }\n\n  public addState(StatesEnum: any, id: string): void {\n    let stateId: string = this.getStateId(id) as string\n    if (this.idsMap.has(stateId)) {\n      throw new Error(\"State already defined: \" + stateId)\n    }\n    this.idsMap.set(id, stateId)\n    this.statesMap.set(id, new StatesEnum(this, id, this.model))\n  }\n\n  public getStateId(id: string): string {\n    for (let name in this.statesEnum) {\n      if (id === this.statesEnum[name]) {\n        return name\n      }\n    }\n  }\n\n  public setState(id: string, data?: any, isSkipped?: boolean): void {\n    if (this.currentState) {\n      this.currentState.cleanUp()\n    }\n    this.currentState = this.statesMap.get(id) as BaseState\n    this.currentStateName = this.idsMap.get(id) as string\n    this.stateChanged(this.idsMap.get(id) as string, this.model)\n    this.currentState.begin(data)\n  }\n\n  stateChanged(id: string, model: any) {\n    console.log(`STATE CHANGED::${id}`);\n    \n    EventManager.dispatch(StateMachineEvents.STATE_CHANGED, id);\n    model.currentState = this.currentStateName\n  }\n}\n"]}