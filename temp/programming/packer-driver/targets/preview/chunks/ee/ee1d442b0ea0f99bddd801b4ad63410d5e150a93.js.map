{"version":3,"sources":["file:///Users/artemfedorov/Documents/dev/rpg-mini/assets/Scripts/components/BattleComponent.ts"],"names":["_decorator","Component","Node","ProgressBar","EventManager","Facade","ccclass","property","BattleComponent","type","team1","team2","totalHP1","totalHP2","onHeroDead","hero","team","heroes","splice","indexOf","isBattleOver","endBattle","onHP","total","getTotalTeamHP","initial","id","percentage","calculatePercentage","progressBarName","GameProgress","getChildByName","getComponent","progress","initialValue","currentValue","Error","Math","max","onLoad","add","onDestroy","remove","initBattle","startAttackCycles","reduce","HP","targetTeam","startAttack","length","console","log","dispatch"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,W,OAAAA,W;;AAE/BC,MAAAA,Y;;AACAC,MAAAA,M;;;;;;;;;OAED;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;;iCAIjBQ,e,WADZF,OAAO,CAAC,iBAAD,C,UAGHC,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEP;AAAR,OAAD,C,2BAHb,MACaM,eADb,SACqCP,SADrC,CAC+C;AAAA;AAAA;;AAAA;;AAAA,eAKnCS,KALmC;AAAA,eAMnCC,KANmC;AAAA,eAQnCC,QARmC,GAQhB,CARgB;AAAA,eASnCC,QATmC,GAShB,CATgB;;AAAA,eA4CnCC,UA5CmC,GA4CrBC,IAAD,IAA+B;AAChDA,YAAAA,IAAI,CAACC,IAAL,CAAUC,MAAV,CAAiBC,MAAjB,CAAwBH,IAAI,CAACC,IAAL,CAAUC,MAAV,CAAiBE,OAAjB,CAAyBJ,IAAzB,CAAxB,EAAwD,CAAxD;;AAEA,gBAAI,KAAKK,YAAL,EAAJ,EAAyB;AACrB,mBAAKC,SAAL;AACH;AACJ,WAlD0C;;AAAA,eAoDnCC,IApDmC,GAoD3BN,IAAD,IAAsB;AACjC,gBAAMO,KAAK,GAAG,KAAKC,cAAL,CAAoBR,IAApB,CAAd;AACA,gBAAMS,OAAO,GAAGT,IAAI,CAACU,EAAL,KAAY,CAAZ,GAAgB,KAAKd,QAArB,GAAgC,KAAKC,QAArD;AACA,gBAAMc,UAAU,GAAG,KAAKC,mBAAL,CAAyBH,OAAzB,EAAkCF,KAAlC,CAAnB;AAEA,gBAAMM,eAAe,GAAGb,IAAI,CAACU,EAAL,KAAY,CAAZ,GAAgB,kBAAhB,GAAqC,gBAA7D;AACA,iBAAKI,YAAL,CAAkBC,cAAlB,CAAiCF,eAAjC,EAAkDG,YAAlD,CAA+D7B,WAA/D,EAA4E8B,QAA5E,GAAuFN,UAAvF;AACH,WA3D0C;;AAAA,eA6DnCC,mBA7DmC,GA6Db,CAACM,YAAD,EAAuBC,YAAvB,KAAwD;AAClF,gBAAID,YAAY,IAAI,CAApB,EAAuB;AACnB,oBAAM,IAAIE,KAAJ,CAAU,sCAAV,CAAN;AACH;;AAED,gBAAMT,UAAU,GAAGQ,YAAY,GAAGD,YAAlC;AACA,mBAAOG,IAAI,CAACC,GAAL,CAASX,UAAT,EAAqB,CAArB,CAAP,CANkF,CAMlD;AACnC,WApE0C;AAAA;;AAWjCY,QAAAA,MAAM,GAAS;AACrB;AAAA;AAAA,4CAAaC,GAAb,CAAiB,IAAjB,EAAuB,KAAKlB,IAA5B;AACA;AAAA;AAAA,4CAAakB,GAAb,CAAiB,OAAjB,EAA0B,KAAK1B,UAA/B;AACH;;AAES2B,QAAAA,SAAS,GAAS;AACxB;AAAA;AAAA,4CAAaC,MAAb,CAAoB,IAApB,EAA0B,KAAKpB,IAA/B;AACA;AAAA;AAAA,4CAAaoB,MAAb,CAAoB,OAApB,EAA6B,KAAK5B,UAAlC;AACH;;AAED6B,QAAAA,UAAU,CAACjC,KAAD,EAAcC,KAAd,EAA2B;AACjC,eAAKD,KAAL,GAAaA,KAAb;AACA,eAAKC,KAAL,GAAaA,KAAb;AAEA,eAAKC,QAAL,GAAgB,KAAKY,cAAL,CAAoB,KAAKd,KAAzB,CAAhB;AACA,eAAKG,QAAL,GAAgB,KAAKW,cAAL,CAAoB,KAAKb,KAAzB,CAAhB;AAEA,eAAKiC,iBAAL,CAAuB,KAAKlC,KAA5B,EAAmC,KAAKC,KAAxC;AACA,eAAKiC,iBAAL,CAAuB,KAAKjC,KAA5B,EAAmC,KAAKD,KAAxC;AACH;;AAEOc,QAAAA,cAAc,CAACR,IAAD,EAAqB;AACvC,iBAAOA,IAAI,CAACC,MAAL,CAAY4B,MAAZ,CAAmB,CAACtB,KAAD,EAAQR,IAAR,KAAgC;AACtD,mBAAOQ,KAAK,GAAGR,IAAI,CAAC+B,EAApB;AACH,WAFM,EAEJ,CAFI,CAAP;AAGH;;AAEOF,QAAAA,iBAAiB,CAAC5B,IAAD,EAAa+B,UAAb,EAA+B;AACpD,eAAK,IAAMhC,IAAX,IAAmBC,IAAI,CAACC,MAAxB,EAAgC;AAC5BF,YAAAA,IAAI,CAACiC,WAAL,CAAiBD,UAAjB;AACH;AACJ;;AA4BO3B,QAAAA,YAAY,GAAY;AAC5B,iBAAO,KAAKV,KAAL,CAAWO,MAAX,CAAkBgC,MAAlB,KAA6B,CAA7B,IAAkC,KAAKtC,KAAL,CAAWM,MAAX,CAAkBgC,MAAlB,KAA6B,CAAtE;AACH;;AAEO5B,QAAAA,SAAS,GAAG;AAChB,cAAI,KAAKX,KAAL,CAAWO,MAAX,CAAkBgC,MAAlB,GAA2B,CAA/B,EAAkC;AAC9BC,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH,WAFD,MAEO;AACHD,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH;;AAED;AAAA;AAAA,gCAAOnC,IAAP,GAAc,KAAKN,KAAnB;AACA;AAAA;AAAA,4CAAa0C,QAAb,CAAsB,UAAtB;AACH;;AAnF0C,O;;;;;iBAGf,I","sourcesContent":["import { _decorator, Component, Node, ProgressBar } from 'cc';\nimport { HeroComponent } from '../../prefabs/scripts/HeroComponent';\nimport EventManager from '../eventManager/EventManager';\nimport Facade from '../Facade';\nimport { Team } from './TeamsBuilderComponent';\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('BattleComponent')\nexport class BattleComponent extends Component {\n\n    @property({ type: Node })\n    public GameProgress: Node = null;\n\n    private team1: Team;\n    private team2: Team;\n\n    private totalHP1: number = 0;\n    private totalHP2: number = 0;\n\n    protected onLoad(): void {\n        EventManager.add('hp', this.onHP);\n        EventManager.add('death', this.onHeroDead);\n    }\n\n    protected onDestroy(): void {\n        EventManager.remove('hp', this.onHP);\n        EventManager.remove('death', this.onHeroDead);\n    }\n\n    initBattle(team1: Team, team2: Team) {\n        this.team1 = team1;\n        this.team2 = team2;\n\n        this.totalHP1 = this.getTotalTeamHP(this.team1);\n        this.totalHP2 = this.getTotalTeamHP(this.team2);\n\n        this.startAttackCycles(this.team1, this.team2);\n        this.startAttackCycles(this.team2, this.team1);\n    }\n\n    private getTotalTeamHP(team: Team): number {\n        return team.heroes.reduce((total, hero: HeroComponent) => {\n            return total + hero.HP;\n        }, 0);\n    }\n\n    private startAttackCycles(team: Team, targetTeam: Team) {\n        for (const hero of team.heroes) {\n            hero.startAttack(targetTeam);\n        }\n    }\n\n    private onHeroDead = (hero: HeroComponent): void => {\n        hero.team.heroes.splice(hero.team.heroes.indexOf(hero), 1);\n\n        if (this.isBattleOver()) {\n            this.endBattle();\n        }\n    }\n\n    private onHP = (team: Team): void => {\n        const total = this.getTotalTeamHP(team);\n        const initial = team.id === 1 ? this.totalHP1 : this.totalHP2;\n        const percentage = this.calculatePercentage(initial, total);\n\n        const progressBarName = team.id === 1 ? 'GreenProgressBar' : 'RedProgressBar';\n        this.GameProgress.getChildByName(progressBarName).getComponent(ProgressBar).progress = percentage;\n    }\n\n    private calculatePercentage = (initialValue: number, currentValue: number): number => {\n        if (initialValue <= 0) {\n            throw new Error(\"Initial value must be greater than 0\");\n        }\n\n        const percentage = currentValue / initialValue;\n        return Math.max(percentage, 0); // Ensure the percentage doesn't go below 0\n    }\n\n    private isBattleOver(): boolean {\n        return this.team1.heroes.length === 0 || this.team2.heroes.length === 0;\n    }\n\n    private endBattle() {\n        if (this.team1.heroes.length > 0) {\n            console.log('Win team 1');\n        } else {\n            console.log('Win team 2');\n        }\n\n        Facade.team = this.team1;\n        EventManager.dispatch('roundEnd');\n    }\n}"]}