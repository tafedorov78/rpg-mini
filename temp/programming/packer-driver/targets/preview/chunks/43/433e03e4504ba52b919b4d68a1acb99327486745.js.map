{"version":3,"sources":["file:///Users/artemfedorov/Documents/dev/rpg-mini/assets/Scripts/state-machine/events/EventManager.ts"],"names":["EventManager","constructor","add","eventName","callback","eventListeners","push","addOnce","remove","listeners","index","indexOf","splice","dispatch","args"],"mappings":";;;iBAEqBA,Y;;;;;;;;;;;;;yBAAAA,Y,GAAN,MAAMA,YAAN,CAAmB;AAGtBC,QAAAA,WAAW,GAAG,CAAE;;AAEP,eAAHC,GAAG,CAACC,SAAD,EAAoBC,QAApB,EAAmD;AAChE,cAAI,CAACJ,YAAY,CAACK,cAAb,CAA4BF,SAA5B,CAAL,EAA6C;AACzCH,YAAAA,YAAY,CAACK,cAAb,CAA4BF,SAA5B,IAAyC,EAAzC;AACH;;AACDH,UAAAA,YAAY,CAACK,cAAb,CAA4BF,SAA5B,EAAuCG,IAAvC,CAA4CF,QAA5C;AACH;;AAEoB,eAAPG,OAAO,CAACJ,SAAD,EAAoBC,QAApB,EAAmD;AACpEJ,UAAAA,YAAY,CAACQ,MAAb,CAAoBL,SAApB,EAA+BC,QAA/B;AACAJ,UAAAA,YAAY,CAACE,GAAb,CAAiBC,SAAjB,EAA4BC,QAA5B;AACH;;AAEmB,eAANI,MAAM,CAACL,SAAD,EAAoBC,QAApB,EAAmD;AACnE,cAAMK,SAAS,GAAGT,YAAY,CAACK,cAAb,CAA4BF,SAA5B,CAAlB;;AACA,cAAI,CAACM,SAAL,EAAgB;AACZ;AACH;;AAED,cAAMC,KAAK,GAAGD,SAAS,CAACE,OAAV,CAAkBP,QAAlB,CAAd;;AACA,cAAIM,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdD,YAAAA,SAAS,CAACG,MAAV,CAAiBF,KAAjB,EAAwB,CAAxB;AACH;AACJ;;AAEqB,eAARG,QAAQ,CAACV,SAAD,EAA0C;AAC5D,cAAMM,SAAS,GAAGT,YAAY,CAACK,cAAb,CAA4BF,SAA5B,CAAlB;;AACA,cAAI,CAACM,SAAL,EAAgB;AACZ;AACH;;AAJ2D,4CAAnBK,IAAmB;AAAnBA,YAAAA,IAAmB;AAAA;;AAK5D,eAAK,IAAMV,QAAX,IAAuBK,SAAvB,EAAkC;AAC9BL,YAAAA,QAAQ,CAAC,GAAGU,IAAJ,CAAR;AACH;AACJ;;AArC6B,O;;AAAbd,MAAAA,Y,CACFK,c,GAAqD,E","sourcesContent":["type EventCallback = (...args: any[]) => void;\n\nexport default class EventManager {\n    private static eventListeners: { [key: string]: EventCallback[] } = {};\n\n    private constructor() {}\n\n    public static add(eventName: string, callback: EventCallback): void {\n        if (!EventManager.eventListeners[eventName]) {\n            EventManager.eventListeners[eventName] = [];\n        }\n        EventManager.eventListeners[eventName].push(callback);\n    }\n\n    public static addOnce(eventName: string, callback: EventCallback): void {\n        EventManager.remove(eventName, callback);\n        EventManager.add(eventName, callback);\n    }\n\n    public static remove(eventName: string, callback: EventCallback): void {\n        const listeners = EventManager.eventListeners[eventName];\n        if (!listeners) {\n            return;\n        }\n        \n        const index = listeners.indexOf(callback);\n        if (index !== -1) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    public static dispatch(eventName: string, ...args: any[]): void {\n        const listeners = EventManager.eventListeners[eventName];\n        if (!listeners) {\n            return;\n        }\n        for (const callback of listeners) {\n            callback(...args);\n        }\n    }\n}"]}