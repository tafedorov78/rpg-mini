{"version":3,"sources":["file:///Users/artemfedorov/Documents/dev/rpg-mini/assets/prefabs/scripts/HeroComponent.ts"],"names":["_decorator","assetManager","Component","Label","ProgressBar","sp","tween","v3","Vec3","EventManager","BulletComponent","ccclass","property","HeroComponent","Skeleton","hp","heroConfig","bulletFactory","targetTeam","bulletNames","damageNames","attackSpeed","hitPower","team","isAlive","isIdle","hit","attack","start","HPBar","progress","init","bundle","getBundle","load","spinePath","SkeletonData","err","skeletonData","console","error","Spine","dispatch","playIdle","startAttack","schedule","target","heroes","Math","floor","random","length","r","bulletName","damageName","animateBullet","node","getPosition","setAnimation","time","scheduleOnce","getHit","damage","applyDamage","die","value","HP","HPLabel","string","toFixed","active","playWalk","isLeft","setScale","positionTo","pos","onComplete","to","position","call","targetPos","bullet","get","parent","addChild","setPosition","x","y","z","targetPosition","getComponent","animate","put"],"mappings":"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","sourcesContent":["import { _decorator, assetManager, Component, Label, Node, ProgressBar, sp, tween, v3, Vec3 } from 'cc';\nimport { PoolObjectComponent } from '../../Scripts/components/poolFactory/PoolObjectComponent';\nimport { HeroConfig } from '../../Scripts/ConfigTypes';\nimport EventManager from '../../Scripts/eventManager/EventManager';\nimport { BulletComponent } from '../bullet/scripts/BulletComponent';\nimport { Team } from '../../Scripts/components/TeamsBuilderComponent';\nconst { ccclass, property } = _decorator;\n\n@ccclass('HeroComponent')\nexport class HeroComponent extends Component {\n\n    @property(sp.Skeleton)\n    private Spine: sp.Skeleton = null;\n\n    @property(Label)\n    private HPLabel: Label = null;\n\n    @property(ProgressBar)\n    private HPBar: ProgressBar = null;\n\n    private hp: number = 0;\n    private heroConfig: HeroConfig;\n    private bulletFactory: PoolObjectComponent;\n\n    private targetTeam: Team;\n\n    private bulletNames: string[] = ['0', '1', '2'];\n    private damageNames: string[] = ['GetPoisoned', 'GetFreez', 'GetHit'];\n\n    public attackSpeed: number = 0;\n    public hitPower: number = 0;\n\n    public team: Team;\n\n    public isAlive: boolean = true;\n    public isIdle: boolean = true;\n\n    protected start(): void {\n        this.HPBar.progress = this.hp / this.heroConfig.hp;\n    }\n\n    init(heroConfig: HeroConfig, bulletFactory: PoolObjectComponent): void {\n        this.heroConfig = heroConfig;\n        this.bulletFactory = bulletFactory;\n        this.hp = this.heroConfig.hp;\n        this.attackSpeed = this.heroConfig.attackSpeed;\n        this.hitPower = this.heroConfig.hitPower;\n\n        const bundle = assetManager.getBundle('Characters');\n        bundle.load(`${heroConfig.spinePath}`, sp.SkeletonData, (err, skeletonData) => {\n            if (err) {\n                console.error('Error loading SkeletonData from bundle:', err);\n                return;\n            }\n\n            this.Spine.skeletonData = skeletonData;\n            EventManager.dispatch('readyToPosition', this);\n            this.playIdle();\n        });\n    }\n\n    public startAttack(targetTeam: Team): void {\n        this.targetTeam = targetTeam;\n        this.schedule(this.hit, 100 / this.attackSpeed);\n    }\n\n    hit = (): void => {\n        if (!this.isAlive) return;\n\n        this.attack();\n    }\n\n    private attack(): void {\n        const target: HeroComponent = this.targetTeam.heroes[Math.floor(Math.random() * this.targetTeam.heroes.length)];\n\n        if (!target || !this.isIdle || !this.isAlive) {\n            return;\n        }\n\n        this.isIdle = false;\n\n        const r = Math.floor(Math.random() * this.bulletNames.length);\n        const bulletName = this.bulletNames[r];\n        const damageName = this.damageNames[r];\n\n        this.animateBullet(target.node.getPosition(), bulletName);\n        this.Spine.setAnimation(0, 'Attack', false);\n\n        const time = bulletName === '2' ? 0.8 : 0.5;\n\n        this.scheduleOnce(() => {\n            target.getHit(this.hitPower, damageName);\n            this.playIdle();\n        }, time);\n    }\n\n    public getHit(damage: number, damageName: string): void {\n        if (!this.isAlive) return;\n\n        this.isIdle = false;\n\n        this.Spine.setAnimation(0, damageName, false);\n        this.applyDamage(damage);\n\n        this.scheduleOnce(() => {\n            this.playIdle();\n        }, 0.8);\n    }\n\n    public playIdle(): void {\n        if (!this.isAlive) return;\n        this.isIdle = true;\n        this.Spine.setAnimation(0, 'Idle', true);\n    }\n\n    public die(): void {\n        this.isIdle = false;\n        this.Spine.setAnimation(0, 'Death', false);\n    }\n\n    private applyDamage(value: number): void {\n        if (!this.isAlive) return;\n\n        this.HP -= value;\n        this.HPBar.progress = this.hp / this.heroConfig.hp;\n        this.HPLabel.string = this.hp.toFixed(0) + '%';\n\n        if (this.hp <= 0) {\n            this.hp = 0;\n            this.HPBar.node.active = false;\n            this.HPLabel.node.active = false;\n            this.isAlive = false;\n            this.die();\n            EventManager.dispatch('death', this);\n        }\n    }\n\n    private playWalk(): void {\n        this.Spine.setAnimation(0, 'Walk', true);\n        if (this.team.isLeft) {\n            this.Spine.node.setScale(new Vec3(-1, 1, 1));\n        }\n    }\n\n    public positionTo(pos: Vec3, onComplete: Function): void {\n        this.playWalk();\n\n        tween(this.node)\n            .to(2, { position: pos })\n            .call(() => {\n                this.playIdle();\n                onComplete();\n            })\n            .start();\n    }\n\n    private animateBullet(targetPos: Vec3, bulletName: string): void {\n        const bullet: Node = this.bulletFactory.get();\n        const pos = this.node.getPosition();\n        this.node.parent.addChild(bullet);\n        bullet.setPosition(pos.x, pos.y + 100, pos.z);\n        const targetPosition = v3(targetPos.x, targetPos.y + 100, targetPos.z);\n\n        bullet.getComponent(BulletComponent).animate(targetPosition, bulletName, this.team.isLeft, (bullet) => {\n            this.bulletFactory.put(bullet);\n        })\n    }\n\n    set HP(value: number) {\n        this.hp = value;\n\n        EventManager.dispatch('hp', this.team)\n    }\n\n    get HP(): number {\n        return this.hp;\n    }\n}\n"]}